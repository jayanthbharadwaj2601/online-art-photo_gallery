from flask import Flask
from flask import request
from flask import render_template
#generated by gpt
import base64
import sqlite3
app=Flask(__name__)
@app.route('/',methods=['GET','POST'])
def func():
    return render_template('index.html')
@app.route('/signup',methods=['GET','POST'])
def signup():
    d=request.form.get('username')
    e=request.form.get('password')
    conn=sqlite3.Connection('social_media.db')
    f=list(conn.execute('select username from users'))
    c=0
    for i in f:
        if i[0]==d:
            c+=1
            break
    if c==0:
        conn.execute('insert into users values(?,?)',(d,e))
        conn.commit()
        return 'User added successfully!'
    else:
        return 'User already exists!'
@app.route('/login',methods=['GET','POST'])
def login():
    d=request.form.get('username')
    e=request.form.get('password')
    conn=sqlite3.Connection('social_media.db')
    f=list(conn.execute('select * from users'))
    g=list(conn.execute('select * from posts order by ID desc'))
    print(g)
    c=0
    for i in f:
        if i[0]==d and i[1]==e:
            c+=1
            break
    if c==1:
        #generated by gpt
        return render_template('homepage.html',username=d,posts=[(base64.b64encode(item[0]), item[1], item[2]) for item in g])
    else:
        return 'invalid username/password'
@app.route('/upload',methods=['GET','POST'])
def upload():
    g=request.form.get('submit')
    g=g.split()
    # print(g,g[1])
    return render_template('upload.html',username=g[1])
@app.route('/post',methods=['GET','POST'])
def post():
    g=request.form.get('submit')
    g=g.split()
    h=g[1]
    #line 54=image input(Generated by gpt)
    o1=request.files['post1'].read()
    o2=request.form.get('description')
    conn=sqlite3.Connection('social_media.db')
    maxi=0
    d=list(conn.execute('select * from posts'))
    for i in d:
        maxi=max(maxi,i[3])
    conn.execute('insert into posts values(?,?,?,?)',(o1,o2,h,maxi+1))
    conn.commit()
    return 'Uploaded successfully!'
@app.route('/view_profile',methods=['GET','POST'])
def view_profile():
    g=request.form.get('username')
    o=request.form.get('submit').split()
    u=o[1]
    conn=sqlite3.Connection('social_media.db')
    h=list(conn.execute('select * from posts order by ID desc'))
    pictures=list(conn.execute('select * from profile_pictures'))
    descriptions=list(conn.execute('select * from user_description'))
    #generated by gpt
    o2=b''
    for i in pictures:
        if i[0]==g:
            o2=i[1]
            break
    s3=''
    for i in descriptions:
        if i[0]==g:
            s3=i[1]
            break
    c=0
    d=[]
    for i in h:
        if i[2]==g:
            d.append(i)
    c1=0
    usernames=list(conn.execute('select * from users'))
    print(usernames)
    for i in usernames:
        if i[0]==g:
            c1+=1
            break
    # print(usernames)
    if c1==0:
        g=''
    #generated by gpt
    return render_template('profile.html',username=u,username1=g,posts=[(base64.b64encode(item[0]), item[1], item[2]) for item in d],profile_picture=base64.b64encode(o2),description=s3)
@app.route('/profile',methods=['GET','POST'])
def profile():
    g=request.form.get('submit')
    d=[]
    conn=sqlite3.Connection('social_media.db')
    e=list(conn.execute('select * from posts order by ID desc'))
    for i in e:
        if i[2]==g:
            d.append(i)
    f=list(conn.execute('select * from user_description'))
    pictures=list(conn.execute('select * from profile_pictures'))
    #generated by gpt
    o2=b''
    for i in pictures:
        if i[0]==g:
            o2=i[1]
            break
    s1=''
    for i in f:
        if i[0]==g:
            s1=i[1]
            break
    #generated by gpt
    return render_template('user_profile.html',username=g,description=s1,posts=[(base64.b64encode(item[0]), item[1], item[2],item[3]) for item in d],profile_picture=base64.b64encode(o2))
@app.route('/homepage',methods=['GET','POST'])
def home():
    conn=sqlite3.connect('social_media.db')
    g=list(conn.execute('select * from posts order by ID desc'))
    o=request.form.get('submit').split()
    p=o[1]
    #generated by gpt
    return render_template('homepage.html',username=p,posts=[(base64.b64encode(item[0]), item[1], item[2]) for item in g])
@app.route('/edit',methods=['GET','POST'])
def edit():
    conn=sqlite3.connect('social_media.db')
    g=list(conn.execute('select * from user_description'))
    c=0
    h=request.form.get('submit').split()
    r=request.form.get('description')
    o=h[1]
    for i in g:
        if i[0]==o:
            c+=1
            break
    if c==0:
        conn.execute('insert into user_description values(?,?)',(o,r))
        conn.commit()
        print('Inserted',o,r)
    else:
        conn.execute('update user_description set description=? where username=?',(r,o))
        conn.commit()
        print('Updated',o,r)
    return 'Description edited sucessfully!'
@app.route('/edit1',methods=['GET','POST'])
def edit1():
    g=request.form.get('submit').split('`')
    h=g[2]
    h1=g[1]
    return render_template('edit_description.html',username=h1,description=h)
@app.route('/edit_profile_picture',methods=['GET','POST'])
def edit_profile_picture():
    o=request.form.get('submit').split()
    p=o[1]
    return render_template('edit_profile_picture.html',username=p)
@app.route('/update_profile_picture',methods=['GET','POST'])
def update_profile_picture():
    #image input(Generated by gpt)
    o1=request.files['post1'].read()
    p=request.form.get('submit').split()
    q=p[1]
    conn=sqlite3.Connection('social_media.db')
    r=list(conn.execute('select * from profile_pictures'))
    c=0
    for i in r:
        if i[0]==q:
            c+=1
            break
    if c==0:
        conn.execute('insert into profile_pictures values(?,?)',(q,o1))
        conn.commit()
    else:
        conn.execute('update profile_pictures set picture=? where username=?',(o1,q))
        conn.commit()
    return 'picture updated successfully!'
@app.route('/delete_post',methods=['GET','POST'])
def deletion():
    g=request.form.get('submit1').split()
    h=int(g[1])
    conn=sqlite3.connect('social_media.db')
    conn.execute('delete from posts where ID='+str(h))
    conn.commit()
    return 'Post deleted successfully!'
@app.route('/view_profile_1',methods=['GET','POST'])
def view_profile_1():
    o=request.form.get('submit').split()
    g=o[0]
    u=o[1]
    conn=sqlite3.Connection('social_media.db')
    h=list(conn.execute('select * from posts'))
    pictures=list(conn.execute('select * from profile_pictures'))
    descriptions=list(conn.execute('select * from user_description'))
    #generated by gpt
    o2=b''
    for i in pictures:
        if i[0]==g:
            o2=i[1]
            break
    s3=''
    for i in descriptions:
        if i[0]==g:
            s3=i[1]
            break
    c=0
    d=[]
    for i in h:
        if i[2]==g:
            d.append(i)
    c1=0
    usernames=list(conn.execute('select * from users'))
    print(usernames)
    for i in usernames:
        if i[0]==g:
            c1+=1
            break
    # print(usernames)
    if c1==0:
        g=''
    #generated by gpt
    return render_template('profile.html',username=u,username1=g,posts=[(base64.b64encode(item[0]), item[1], item[2]) for item in d],profile_picture=base64.b64encode(o2),description=s3)